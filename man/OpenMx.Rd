% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/zzz.R
\docType{package}
\name{OpenMx}
\alias{OpenMx}
\alias{OpenMx-package}
\title{OpenMx: An package for Structural Equation Modeling and Matrix Algebra Optimization}
\description{
OpenMx is a package for structural equation modeling, matrix algebra optimization and other statistical estimation problems.
Try the example below. We try and have useful help files: for instance help(\code{\link{mxRun}}) to learn more. Also the reference manual
}
\details{
OpenMx solves algebra optimization and statistical estimation problems using matrix algebra.
Most users use it for Structural equation modeling.

The core function is \code{\link{mxModel}}, which makes a model. Models are containers for data, matrices, \code{\link{mxPath}}s
algebras, bounds and constraints. Models most often have an expectation function (e.g., \code{\link{mxExpectationNormal}})
to calculate the expectations for the model. Models need a fit function. Several of these are built-in (e.g., \link{mxFitFunctionML} )
OpenMx also allows user-defined fit functions for purposes not covered by the built-in functions. (e.g., \link{mxFitFunctionR} or \link{mxFitFunctionAlgebra}).

Once built, the resulting mxModel can be run (i.e., optimized) using \link{mxRun}. This returns the fitted model.

You can see the resulting parameter estimates, algebra evaluation etc using summary(yourModel)

The user's manual is online (see reference below), but functions \link{mxRun}, \link{mxModel}, \link{mxMatrix}
all have working examples to get you started as well.

The main OpenMx functions are: \link{mxAlgebra}, \link{mxBounds}, \link{mxCI}, \link{mxConstraint}, \link{mxData},
\link{mxMatrix}, \link{mxModel}, and \link{mxPath}

Expectation functions include \link{mxExpectationNormal}, \link{mxExpectationRAM}, \link{mxExpectationLISREL}, and \link{mxExpectationStateSpace};

Fit functions include \link{mxFitFunctionML}, \link{mxFitFunctionAlgebra}, \link{mxFitFunctionRow} and \link{mxFitFunctionR}.

OpenMx comes with several useful datasets built-in. Access them using data(package="OpenMx")


To cite package 'OpenMx' in publications use:

Steven M. Boker, Michael C. Neale, Hermine H. Maes, Michael J. Wilde, Michael Spiegel, Timothy R. Brick,
Jeffrey Spies, Ryne Estabrook, Sarah Kenny, Timothy C. Bates, Paras Mehta, and John Fox. (2011) OpenMx: An
Open Source Extended Structural Equation Modeling Framework. Psychometrika.

Steven M. Boker, Michael C. Neale, Hermine H. Maes, Michael J. Wilde, Michael Spiegel, Timothy R. Brick, Ryne
Estabrook, Timothy C. Bates, Paras Mehta, Timo von Oertzen, Ross J. Gore, Michael D. Hunter, Daniel C.
Hackett, Julian Karch and Andreas M. Brandmaier. (2014) OpenMx 2 User Guide.
}
\examples{
library(OpenMx)
data(demoOneFactor)
# ===============================
# = Make and run a 1-factor CFA =
# ===============================

latents  = c("G") # the latent factor
manifests = names(demoOneFactor) # manifest variables to be modeled
# ====================
# = Make the MxModel =
# ====================
m1 <- mxModel("One Factor", type = "RAM",
	manifestVars = manifests, latentVars = latents,
	mxPath(from = latents, to = manifests),
	mxPath(from = manifests, arrows = 2),
	mxPath(from = latents, arrows = 2, free = FALSE, values = 1.0),
	mxData(cov(demoOneFactor), type = "cov", numObs = 500)
)

# ===============================
# = mxRun it and get a summary! =
# ===============================

m1 = mxRun(m1)
summary(m1, show = "std")
}
\references{
The OpenMx User's guide can be found at \url{http://openmx.psyc.virginia.edu/documentation}
}

